[tool.poetry]
name = "flexeval"
version = "0.0.0" # This will be automatically set from git tag by poetry-dynamic-versioning
description = ""
authors = ["ryokan-ri <ryokan.ri@sbintuitions.co.jp>"]
readme = "README.md"
packages = [{ include = "flexeval", from = "." }]

[tool.poetry.scripts]
flexeval_lm = "flexeval.scripts.flexeval_lm:main"
flexeval_pairwise = "flexeval.scripts.flexeval_pairwise:main"
flexeval_reward = "flexeval.scripts.flexeval_reward:main"
flexeval_file = "flexeval.scripts.flexeval_file:main"
flexeval_presets = "flexeval.scripts.flexeval_presets:main"


[tool.poetry.dependencies]
python = ">=3.10,<3.13"  # set version bound because we get "Unable to find installation candidates" with torch 2.5.1
transformers = {extras = ["ja", "sentencepiece", "torch"], version = "^4.34.1"}
datasets = "^2.14.6"
evaluate = "^0.4.1"
peft = "^0.10.0"
jsonargparse = {extras = ["jsonnet"], version = "^4.26.1"}
jinja2 = "^3.1.2"
fuzzywuzzy = "^0.18.0"
python-levenshtein = "^0.23.0"
rouge = "^1.0.1"
sacrebleu = {extras = ["ja"], version = "^2.4.1"}
jiwer = "^3.0.4"
openai = "^1.52.2"
google-api-python-client = "^2.131.0"
vllm = {version = "0.9.2", optional = true }
loguru = "^0.7.2"
wandb = {version = "^0.17.2", optional = true}
pyarrow = "16.1.0"  # set the version because we get "Unable to find installation candidates" with 17.0.0
litellm = "^1.52.9"
scipy = "^1.13.0"
smart-open = "^7.1.0"
# The "ja" component of Transformers depends on sudachipy 0.6.6 or later. For aarch64 Linux h
# environment, the pre-built binary of sudachi.rs is not available from PyPI. Pip downloads the
# source distribution and attempts to build it. This hits FTBFS of sudachi.rs v0.6.9, and has been
# fixed in v0.6.10.
sudachipy = ">=0.6.10"
tiktoken = "^0.9.0"
scikit-learn = "1.6.1"
math-verify = {version = "^0.7.0", extras = ["antlr4_13_2"]}

[tool.poetry.extras]
vllm = ["vllm"]
wandb = ["wandb"]


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-mock = "^3.14.0"
taskipy = "^1.12.0"
ruff = "^0.4.5"
pytest-xdist = "^3.7.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.25"
mkdocstrings = {extras = ["python"], version = "^0.29.0"}
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-section-index = "^0.3.9"


[tool.poetry.group.format_following.dependencies]
langdetect = "^1.0.9"
jsonschema = "^4.23.0"
nltk = "^3.9.1"
defusedxml = "^0.7.1"
pyyaml = "^6.0.2"
mecab-python3 = "^1.0.10"
unidic = "^1.1.0"
ja-sentence-segmenter = "^0.0.2"
janome = "^0.5.0"
spacy = "^3.8.4"
tomli = "^2.2.1"
pydantic = {version = "^2.11.7", extras = ["email"]}
jinja2 = "^3.1.6"

[build-system]
requires = ["poetry-core", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812", # flake8-commas "Trailing comma missing"
    "ISC001", # flake8-implicit-str-concat
    "D",  # Docstring-related rules
    "FBT",  # flake8-boolean-trap
    "G",  # flake8-logging-format
    "TD", # flake8-todos
    "ANN003",  # missing-type-kwargs
    "ANN101",  # missing-type-self
    "ARG002",  # unused-method-argument
    "FIX002",  # line-contains-todo
    "PLR0913",  # too-many-arguments
    "PLR2004",  # magic-value-comparison
    "PT011",  # pytest-raises-too-broad
    "PTH123",  # builtin-open
    "RUF001",  # ambiguous-unicode-character-string
    "RUF002", # ambiguous-unicode-character-docstring
    "S311",  # suspicious-non-cryptographic-random-usage
    "S603",  # subprocess-without-shell-equals-true
    "TCH001",  # typing-only-first-party-import
    "TCH002",  # typing-only-third-party-import
    "TCH003",  # typing-only-standard-library-import
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402",  # module-import-not-at-top-of-file
    "F401",  # unused-import
    "F403",  # undefined-local-with-import-star
]
"tests/**.py" = [
    "S101", # assert
]

[tool.taskipy.tasks]
format = "ruff check --fix; ruff format"
format_docs = "markdownlint -f docs"
test = "pytest tests"
